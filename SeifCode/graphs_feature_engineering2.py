# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hFsA1QEGL8uFPoXpIsUdizHw6R1LqYWf
"""

import pandas as pd
import matplotlib.pyplot as plt

import joblib

import numpy as np

import seaborn as sns
import plotly.express as px
from plotly.offline import iplot , plot
import plotly.io as pio
from plotly.offline import init_notebook_mode
init_notebook_mode(connected=True)
from plotly.subplots import make_subplots
from sklearn.preprocessing import MinMaxScaler , LabelEncoder
from sklearn.preprocessing import OrdinalEncoder
from sklearn.model_selection import train_test_split , cross_val_score
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier , GradientBoostingClassifier , BaggingClassifier
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from xgboost import XGBClassifier
from sklearn.metrics import  ConfusionMatrixDisplay, classification_report
from scipy.stats import spearmanr
import warnings
from scipy.stats import mannwhitneyu

file_path = 'alzheimers_prediction_dataset.csv'
data = pd.read_csv(file_path)

print("Dataset Overview")
print("Number of records:", data.shape[0])
print("Number of features:", data.shape[1])
print("Columns:", data.columns.tolist())

print("\nData Information:")
data.info()

print("\nDescriptive Statistics for Numerical Features:")
print(data.describe())

duplicates = data.duplicated().sum()
print(f"\nNumber of duplicate records: {duplicates}")

numerical_features = ['Age', 'Education Level', 'BMI', 'Cognitive Test Score']
for feature in numerical_features:
    if feature in data.columns:
        plt.figure(figsize=(8, 4))
        plt.hist(data[feature].dropna(), bins=30, edgecolor='black')
        plt.title(f'Distribution of {feature}')
        plt.xlabel(feature)
        plt.ylabel('Frequency')
        plt.show()

categorical_features = [col for col in data.columns if data[col].dtype == 'object']
for feature in categorical_features:
    plt.figure(figsize=(8, 4))
    data[feature].value_counts().plot(kind='bar', edgecolor='black')
    plt.title(f'Distribution of {feature}')
    plt.xlabel(feature)
    plt.ylabel('Frequency')
    plt.show()

from scipy.stats import gaussian_kde
numerical_features = ['Age', 'Education Level', 'BMI', 'Cognitive Test Score']

for feature in numerical_features:
    plt.figure(figsize=(8, 4))
    plt.hist(data[feature].dropna(), bins=30, edgecolor='black', density=True, alpha=0.6)

    density = gaussian_kde(data[feature].dropna())
    xs = np.linspace(data[feature].min(), data[feature].max(), 200)
    plt.plot(xs, density(xs))

    plt.title(f'Distribution and Density of {feature}')
    plt.xlabel(feature)
    plt.ylabel('Density')
    plt.show()

correlation_matrix = data[numerical_features].corr()
plt.figure(figsize=(6, 5))
plt.imshow(correlation_matrix, cmap='viridis', interpolation='none', aspect='auto')
plt.colorbar()
plt.xticks(range(len(numerical_features)), numerical_features, rotation=45)
plt.yticks(range(len(numerical_features)), numerical_features)
plt.title('Correlation Heatmap of Numerical Features')
plt.show()

categorical_features = [
    'Cholesterol Level', 'Diabetes',
    'Family History of Alzheimer’s', 'Hypertension',
    'Genetic Risk Factor (APOE-ε4 allele)'
]

for feature in categorical_features:
    counts = data.groupby([feature, "Alzheimer’s Diagnosis"]).size().unstack(fill_value=0)
    counts.plot(kind='bar', edgecolor='black')
    plt.title(f'{feature} vs Alzheimer\'s Diagnosis')
    plt.xlabel(feature)
    plt.ylabel('Count')
    plt.xticks(rotation=0)
    plt.show()

plt.figure(figsize=(8, 4))
data["Alzheimer’s Diagnosis"].value_counts().plot(kind='bar', edgecolor='black')
plt.title("Distribution of Alzheimer's Diagnosis")
plt.xlabel("Diagnosis")
plt.ylabel("Count")
plt.show()